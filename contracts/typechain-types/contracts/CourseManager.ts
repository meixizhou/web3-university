/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface CourseManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "buyWithYD"
      | "buyYD"
      | "createCourse"
      | "exchangeRateEthPerYD"
      | "isPurchased"
      | "nextId"
      | "owner"
      | "purchased"
      | "renounceOwnership"
      | "setEthPerYDRate"
      | "transferOwnership"
      | "yd"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CourseCreated"
      | "CoursePurchased"
      | "OwnershipTransferred"
      | "RateUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "buyWithYD",
    values: [string, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "buyYD", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createCourse",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeRateEthPerYD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isPurchased",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(functionFragment: "nextId", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "purchased",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setEthPerYDRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "yd", values?: undefined): string;

  decodeFunctionResult(functionFragment: "buyWithYD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyYD", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createCourse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeRateEthPerYD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPurchased",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nextId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "purchased", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEthPerYDRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "yd", data: BytesLike): Result;
}

export namespace CourseCreatedEvent {
  export type InputTuple = [id: string, author: AddressLike];
  export type OutputTuple = [id: string, author: string];
  export interface OutputObject {
    id: string;
    author: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CoursePurchasedEvent {
  export type InputTuple = [
    id: string,
    buyer: AddressLike,
    priceYD: BigNumberish
  ];
  export type OutputTuple = [id: string, buyer: string, priceYD: bigint];
  export interface OutputObject {
    id: string;
    buyer: string;
    priceYD: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RateUpdatedEvent {
  export type InputTuple = [weiPerYD: BigNumberish];
  export type OutputTuple = [weiPerYD: bigint];
  export interface OutputObject {
    weiPerYD: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CourseManager extends BaseContract {
  connect(runner?: ContractRunner | null): CourseManager;
  waitForDeployment(): Promise<this>;

  interface: CourseManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  buyWithYD: TypedContractMethod<
    [id: string, author: AddressLike, priceYD: BigNumberish],
    [void],
    "nonpayable"
  >;

  buyYD: TypedContractMethod<[], [void], "payable">;

  createCourse: TypedContractMethod<[id: string], [void], "nonpayable">;

  exchangeRateEthPerYD: TypedContractMethod<[], [bigint], "view">;

  isPurchased: TypedContractMethod<
    [user: AddressLike, id: string],
    [boolean],
    "view"
  >;

  nextId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  purchased: TypedContractMethod<
    [arg0: string, arg1: AddressLike],
    [boolean],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setEthPerYDRate: TypedContractMethod<
    [weiPerYD: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  yd: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "buyWithYD"
  ): TypedContractMethod<
    [id: string, author: AddressLike, priceYD: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "buyYD"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "createCourse"
  ): TypedContractMethod<[id: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "exchangeRateEthPerYD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isPurchased"
  ): TypedContractMethod<[user: AddressLike, id: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "nextId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "purchased"
  ): TypedContractMethod<[arg0: string, arg1: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setEthPerYDRate"
  ): TypedContractMethod<[weiPerYD: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(nameOrSignature: "yd"): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "CourseCreated"
  ): TypedContractEvent<
    CourseCreatedEvent.InputTuple,
    CourseCreatedEvent.OutputTuple,
    CourseCreatedEvent.OutputObject
  >;
  getEvent(
    key: "CoursePurchased"
  ): TypedContractEvent<
    CoursePurchasedEvent.InputTuple,
    CoursePurchasedEvent.OutputTuple,
    CoursePurchasedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RateUpdated"
  ): TypedContractEvent<
    RateUpdatedEvent.InputTuple,
    RateUpdatedEvent.OutputTuple,
    RateUpdatedEvent.OutputObject
  >;

  filters: {
    "CourseCreated(string,address)": TypedContractEvent<
      CourseCreatedEvent.InputTuple,
      CourseCreatedEvent.OutputTuple,
      CourseCreatedEvent.OutputObject
    >;
    CourseCreated: TypedContractEvent<
      CourseCreatedEvent.InputTuple,
      CourseCreatedEvent.OutputTuple,
      CourseCreatedEvent.OutputObject
    >;

    "CoursePurchased(string,address,uint256)": TypedContractEvent<
      CoursePurchasedEvent.InputTuple,
      CoursePurchasedEvent.OutputTuple,
      CoursePurchasedEvent.OutputObject
    >;
    CoursePurchased: TypedContractEvent<
      CoursePurchasedEvent.InputTuple,
      CoursePurchasedEvent.OutputTuple,
      CoursePurchasedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RateUpdated(uint256)": TypedContractEvent<
      RateUpdatedEvent.InputTuple,
      RateUpdatedEvent.OutputTuple,
      RateUpdatedEvent.OutputObject
    >;
    RateUpdated: TypedContractEvent<
      RateUpdatedEvent.InputTuple,
      RateUpdatedEvent.OutputTuple,
      RateUpdatedEvent.OutputObject
    >;
  };
}
